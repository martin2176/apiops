<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
	<!-- Throttle, authorize, validate, cache, or transform the requests -->
	<inbound>
		<base />
		<include-fragment fragment-id="tokenexchange-parsebody" />
		<set-variable name="var333" value="@("client_id="+"{{sf-clientid}}"+"&username="+(System.Net.WebUtility.UrlEncode((string)context.Variables["username"]))+"&password="+(System.Net.WebUtility.UrlEncode((string)context.Variables["password"]))+"&grant_type="+(System.Net.WebUtility.UrlEncode((string)context.Variables["grant_type"]))+"&scope=user.read%20openid%20profile%20offline_access")" />
		<!-- <include-fragment fragment-id="tokenexchange-buildsaasidpcredential" /> -->
		<!-- call to saas idp to get access token, parse it and set token and exp  -->
		<include-fragment fragment-id="tokenexchange-callsaasidp" />
		<include-fragment fragment-id="tokenexchange-parsesaasaccesstoken" />
		<include-fragment fragment-id="tokenexchange-generate-saasaccesstoken-hash" />
		<!--  <set-variable name="accesstoken" value="BBBB" /> -->
		<!--  <set-variable name="accesstoken-exp" value="@((60-10).ToString())" /> -->
		<!--  <set-variable name="accesstoken-cacheduration" value="@(55.ToString())" /> -->
		<cache-store-value key="@((string)context.Variables["access_token_hash"])" value="@((String)context.Variables["access_token"])" duration="@(context.Variables.GetValueOrDefault<int>("accesstoken-cacheduration"))" caching-type="internal" />
		<cache-store-value key="@((string)context.Variables["access_token_hash"] + "-subid")" value="@(context.Subscription.Id)" duration="@(context.Variables.GetValueOrDefault<int>("accesstoken-cacheduration"))" caching-type="internal" />
		<include-fragment fragment-id="tokenexchange-returntokentoclient" />
	</inbound>
	<!-- Control if and how the requests are forwarded to services  -->
	<backend>
		<base />
	</backend>
	<!-- Customize the responses -->
	<outbound>
		<base />
	</outbound>
	<!-- Handle exceptions and customize error responses  -->
	<on-error>
		<base />
	</on-error>
</policies>