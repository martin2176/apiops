openapi: 3.0.1
info:
  title: lisapetstore
  description: 'This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '1.0'
servers:
  - url: http://feiaz-apim-dev.azure-api.net/lisapetstore
  - url: https://feiaz-apim-dev.azure-api.net/lisapetstore
paths:
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: uploads an image
      description: uploads an image
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: Format - int64. ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                file:
                  type: file
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              example:
                code: 0
                type: string
                message: string
  /pet:
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
            example:
              id: 0
              category:
                id: 0
                name: string
              name: doggie
              photoUrls:
                - string
              tags:
                - id: 0
                  name: string
              status: available
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
            example: <Pet> <id>0</id> <Category> <id>0</id> <name>string</name> </Category> <name>doggie</name> <photoUrls> <photoUrl>string</photoUrl> </photoUrls> <tags> <Tag> <id>0</id> <name>string</name> </Tag> </tags> <status>available</status> </Pet>
      responses:
        '405':
          description: Invalid input
          content:
            application/json: { }
            application/xml: { }
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet
      operationId: updatePet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
            example:
              id: 0
              category:
                id: 0
                name: string
              name: doggie
              photoUrls:
                - string
              tags:
                - id: 0
                  name: string
              status: available
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
            example: <Pet> <id>0</id> <Category> <id>0</id> <name>string</name> </Category> <name>doggie</name> <photoUrls> <photoUrl>string</photoUrl> </photoUrls> <tags> <Tag> <id>0</id> <name>string</name> </Tag> </tags> <status>available</status> </Pet>
      responses:
        '400':
          description: Invalid ID supplied
          content:
            application/json: { }
            application/xml: { }
        '404':
          description: Pet not found
          content:
            application/json: { }
            application/xml: { }
        '405':
          description: Validation exception
          content:
            application/json: { }
            application/xml: { }
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          schema:
            type: array
            items:
              enum:
                - available
                - pending
                - sold
              type: string
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetArray'
              example:
                - id: 0
                  category:
                    id: 0
                    name: string
                  name: doggie
                  photoUrls:
                    - string
                  tags:
                    - id: 0
                      name: string
                  status: available
            application/xml:
              schema:
                $ref: '#/components/schemas/PetArray'
              example: <Pet> <id>0</id> <Category> <id>0</id> <name>string</name> </Category> <name>doggie</name> <photoUrls> <photoUrl>string</photoUrl> </photoUrls> <tags> <Tag> <id>0</id> <name>string</name> </Tag> </tags> <status>available</status> </Pet>
        '400':
          description: Invalid status value
          content:
            application/json: { }
            application/xml: { }
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: 'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.'
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetArray'
              example:
                - id: 0
                  category:
                    id: 0
                    name: string
                  name: doggie
                  photoUrls:
                    - string
                  tags:
                    - id: 0
                      name: string
                  status: available
            application/xml:
              schema:
                $ref: '#/components/schemas/PetArray'
              example: <Pet> <id>0</id> <Category> <id>0</id> <name>string</name> </Category> <name>doggie</name> <photoUrls> <photoUrl>string</photoUrl> </photoUrls> <tags> <Tag> <id>0</id> <name>string</name> </Tag> </tags> <status>available</status> </Pet>
        '400':
          description: Invalid tag value
          content:
            application/json: { }
            application/xml: { }
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: Format - int64. ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: 0
                category:
                  id: 0
                  name: string
                name: doggie
                photoUrls:
                  - string
                tags:
                  - id: 0
                    name: string
                status: available
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
              example: <Pet> <id>0</id> <Category> <id>0</id> <name>string</name> </Category> <name>doggie</name> <photoUrls> <photoUrl>string</photoUrl> </photoUrls> <tags> <Tag> <id>0</id> <name>string</name> </Tag> </tags> <status>available</status> </Pet>
        '400':
          description: Invalid ID supplied
          content:
            application/json: { }
            application/xml: { }
        '404':
          description: Pet not found
          content:
            application/json: { }
            application/xml: { }
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: Format - int64. ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                status:
                  type: string
      responses:
        '405':
          description: Invalid input
          content:
            application/json: { }
            application/xml: { }
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: Deletes a pet
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          description: Format - int64. Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
        - name: api_key
          in: header
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
          content:
            application/json: { }
            application/xml: { }
        '404':
          description: Pet not found
          content:
            application/json: { }
            application/xml: { }
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreInventoryGet200ApplicationJsonResponse'
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place an order for a pet
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the pet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example:
              id: 0
              petId: 0
              quantity: 0
              shipDate: string
              status: placed
              complete: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                id: 0
                petId: 0
                quantity: 0
                shipDate: string
                status: placed
                complete: true
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
              example: <Order> <id>0</id> <petId>0</petId> <quantity>0</quantity> <shipDate>string</shipDate> <status>placed</status> <complete>true</complete> </Order>
        '400':
          description: Invalid Order
          content:
            application/json: { }
            application/xml: { }
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: Format - int64. ID of pet that needs to be fetched
          required: true
          schema:
            maximum: 10.0
            minimum: 1.0
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                id: 0
                petId: 0
                quantity: 0
                shipDate: string
                status: placed
                complete: true
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
              example: <Order> <id>0</id> <petId>0</petId> <quantity>0</quantity> <shipDate>string</shipDate> <status>placed</status> <complete>true</complete> </Order>
        '400':
          description: Invalid ID supplied
          content:
            application/json: { }
            application/xml: { }
        '404':
          description: Order not found
          content:
            application/json: { }
            application/xml: { }
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: Format - int64. ID of the order that needs to be deleted
          required: true
          schema:
            minimum: 1.0
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content:
            application/json: { }
            application/xml: { }
        '404':
          description: Order not found
          content:
            application/json: { }
            application/xml: { }
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserArray'
            example:
              - id: 0
                username: string
                firstName: string
                lastName: string
                email: string
                password: string
                phone: string
                userStatus: 0
      responses:
        '200':
          description: successful operation
          content:
            application/json: { }
            application/xml: { }
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 0
                username: string
                firstName: string
                lastName: string
                email: string
                password: string
                phone: string
                userStatus: 0
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
              example: <User> <id>0</id> <username>string</username> <firstName>string</firstName> <lastName>string</lastName> <email>string</email> <password>string</password> <phone>string</phone> <userStatus>0</userStatus> </User>
        '400':
          description: Invalid username supplied
          content:
            application/json: { }
            application/xml: { }
        '404':
          description: User not found
          content:
            application/json: { }
            application/xml: { }
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              id: 0
              username: string
              firstName: string
              lastName: string
              email: string
              password: string
              phone: string
              userStatus: 0
      responses:
        '400':
          description: Invalid user supplied
          content:
            application/json: { }
            application/xml: { }
        '404':
          description: User not found
          content:
            application/json: { }
            application/xml: { }
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          content:
            application/json: { }
            application/xml: { }
        '404':
          description: User not found
          content:
            application/json: { }
            application/xml: { }
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginGet200ApplicationJsonResponse'
              example: string
            application/xml:
              schema:
                $ref: '#/components/schemas/UserLoginGet200ApplicationXmlResponse'
              example: <UserLoginGet200ApplicationXmlResponse>string</UserLoginGet200ApplicationXmlResponse>
        '400':
          description: Invalid username/password supplied
          content:
            application/json: { }
            application/xml: { }
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: Logs out current logged in user session
      operationId: logoutUser
      responses:
        '200':
          description: successful operation
          content:
            application/json: { }
            application/xml: { }
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserArray'
            example:
              - id: 0
                username: string
                firstName: string
                lastName: string
                email: string
                password: string
                phone: string
                userStatus: 0
      responses:
        '200':
          description: successful operation
          content:
            application/json: { }
            application/xml: { }
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              id: 0
              username: string
              firstName: string
              lastName: string
              email: string
              password: string
              phone: string
              userStatus: 0
      responses:
        '200':
          description: successful operation
          content:
            application/json: { }
            application/xml: { }
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          items:
            type: string
            xml:
              name: photoUrl
          xml:
            wrapped: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          xml:
            wrapped: true
        status:
          enum:
            - available
            - pending
            - sold
          type: string
          description: pet status in the store
      xml:
        name: Pet
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          enum:
            - placed
            - approved
            - delivered
          type: string
          description: Order Status
        complete:
          type: boolean
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    PetArray:
      type: array
      items:
        $ref: '#/components/schemas/Pet'
    StoreInventoryGet200ApplicationJsonResponse:
      type: object
      additionalProperties:
        type: integer
        format: int32
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/User'
    UserLoginGet200ApplicationJsonResponse:
      type: string
    UserLoginGet200ApplicationXmlResponse:
      type: string
  securitySchemes:
    apiKeyHeader:
      type: apiKey
      name: Ocp-Apim-Subscription-Key
      in: header
    apiKeyQuery:
      type: apiKey
      name: subscription-key
      in: query
security:
  - apiKeyHeader: [ ]
  - apiKeyQuery: [ ]
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io