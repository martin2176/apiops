#Reusable workflow
name: Publish-Artifacts-to-APIM-Environment
run-name: Publish-Artifacts-to-APIM-Environment
#Author martin francis kallukalam
on:
  workflow_call:
    inputs:
      API_MANAGEMENT_ENVIRONMENT:
        required: true
        type: string
      CONFIGURATION_YAML_PATH:
        required: true
        type: string
      API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH:
        required: true
        type: string
      PUBLISH_ARTIFACTS_CHOICE:
        required: true
        type: string
      COMMITID:
        required: true
        type: string
      BRANCH_TO_DEPLOY_FROM:
        required: true
        type: string
concurrency:
 group: publish-artifacts-to-apim-environment-${{ inputs.API_MANAGEMENT_ENVIRONMENT }}
 cancel-in-progress: false

env:
  apiops_release_version: v6.0.1.3
  Logging__LogLevel__Default: ${{ vars.LOG_LEVEL }}
  COMMITID: ${{ inputs.COMMITID }}
  DEBUG_STEPS: 'true'
  
jobs:
    Get-Configuration-Override-File:
     name: Get-Configuration-Override-File
     runs-on: ubuntu-latest
     environment: ${{ inputs.API_MANAGEMENT_ENVIRONMENT }}
     steps:
      - name: Print-Input-From-Calling-Workflow
        id: print-input-from-calling-workflow
        run: |
         echo "apimanagementenvironment is ${{ inputs.API_MANAGEMENT_ENVIRONMENT }}"
         echo "configurationyamlpath is ${{ inputs.CONFIGURATION_YAML_PATH }}"
         echo "apimanagementserviceoutputfolderpath is ${{ inputs.API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH }}"
         echo "publishartifactschoice is ${{ inputs.PUBLISH_ARTIFACTS_CHOICE }}"
         echo "publishartifactschoice from events context is ${{ github.event.inputs.PUBLISH_ARTIFACTS_CHOICE }}"
         echo "commitid is: ${COMMITID}"
         echo "branch to deploy from is: ${{ inputs.BRANCH_TO_DEPLOY_FROM }}"
      - name: Checkout-Dev-Branch
        id: checkout-dev-branch
        if: ${{ inputs.API_MANAGEMENT_ENVIRONMENT == 'dev' }}
        uses: actions/checkout@v4
        with:
         ref: 'dev'
      - name: Copy-Dev-ConfigurationOverride-File
        id: copy-dev-configurationoverride-file
        if: ${{ inputs.API_MANAGEMENT_ENVIRONMENT == 'dev' }}
        run: |
         echo "Copying override configuration file to runner.temp"
         cp configuration-publisher-dev.yaml ${RUNNER_TEMP}/configuration-publisher.yaml
         echo "Cat-ing override configuration file"
         cat ${RUNNER_TEMP}/configuration-publisher.yaml
      - name: Checkout-Test-Branch
        id: checkout-test-branch
        if: ${{ inputs.API_MANAGEMENT_ENVIRONMENT == 'test' }}
        uses: actions/checkout@v4
        with:
         ref: 'test'
      - name: Copy-Test-ConfigurationOverride-File
        id: copy-test-configurationoverride-file
        if: ${{ inputs.API_MANAGEMENT_ENVIRONMENT == 'test' }}
        run: |
         echo "Copying override configuration file to runner.temp"
         cp configuration-publisher-test.yaml ${RUNNER_TEMP}/configuration-publisher.yaml
         echo "Cat-ing override configuration file"
         cat ${RUNNER_TEMP}/configuration-publisher.yaml
      - name: Checkout-Prod-Branch
        id: checkout-prod-branch
        if: ${{ inputs.API_MANAGEMENT_ENVIRONMENT == 'prod' }}
        uses: actions/checkout@v4
        with:
         ref: 'prod'
      - name: Copy-Prod-ConfigurationOverride-File
        id: copy-prod-configurationoverride-file
        if: ${{ inputs.API_MANAGEMENT_ENVIRONMENT == 'prod' }}
        run: |
         echo "Copying override configuration file to runner.temp"
         cp configuration-publisher-prod.yaml ${RUNNER_TEMP}/configuration-publisher.yaml
         echo "Cat-ing override configuration file"
         cat ${RUNNER_TEMP}/configuration-publisher.yaml
      - name: Checkout-Artifacts-Branch
        id: checkout-artifacts-branch
        uses: actions/checkout@v4
        with:
         ref: '${{ inputs.BRANCH_TO_DEPLOY_FROM }}'
         fetch-tags: 'true'
         fetch-depth: 50
      - name: List-Top-Level-Contents-Of-Artifacts-Folder
        id: list-top-level-contents-of-artifacts-folder
        if: ${{ env.DEBUG_STEPS }} == 'true'
        run: |
         echo "Listing the top level artifact directories"
         ls -al ${{ GITHUB.WORKSPACE }}/${{ inputs.API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH }}
      - name: List-Artifacts-Files-Captured-In-the-Commit
        id: list-artifact-files-changes-captured-in-the-commit
        if: ${{ env.DEBUG_STEPS }} == 'true'
        run: git diff --compact-summary
      - name: Run-Publisher
        id: run-publisher
        shell: pwsh
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
          API_MANAGEMENT_SERVICE_NAME: ${{ secrets.API_MANAGEMENT_SERVICE_NAME }}
          API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{ GITHUB.WORKSPACE }}/${{ inputs.API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH }}
          CONFIGURATION_YAML_PATH: ${{ runner.temp }}/configuration-publisher.yaml
        run: |
          $publish_artifacts_choice="${{ inputs.PUBLISH_ARTIFACTS_CHOICE }}"
          if ($publish_artifacts_choice -eq "publish-delta-artifacts-in-last-commit") 
          {
          Write-Output "User have chosen to publish Delta Artifacts in Last Commit"
          $env:COMMIT_ID="$env:COMMITID"
          Write-Output "Commitid is $env:COMMITID"
          }
          
          if ($publish_artifacts_choice -eq "publish-delta-artifacts-in-specific-commit") 
          {
          Write-Output "User have chosen to publish Delta Artifacts in Specific Commit"
          $env:COMMIT_ID="$env:COMMITID"
          Write-Output "Commitid is $env:COMMITID"
          }
          if ($publish_artifacts_choice -eq "publish-all-artifacts-in-repo") 
          {
          Write-Output "User have chosen to publish All Artifacts"
          Write-Output "Commitid is NULL(NULL because a specific Commitid is not set)"
          }
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $VerbosePreference = "Continue"
          $InformationPreference = "Continue"

          Write-Information "Setting name variables..."
          $releaseFileName = "publisher-linux-x64.zip"
          $executableFileName = "publisher"

          if ("${{ runner.os }}" -like "*win*") {
            $releaseFileName = "publisher-win-x64.zip"
            $executableFileName = "publisher.exe"
          }
          elseif ("${{ runner.os }}" -like "*mac*" -and "${{ runner.arch }}" -like "*arm*") {
            $releaseFileName = "publisher-osx-arm64.zip"
          }
          elseif ("${{ runner.os }}" -like "*mac*" -and "${{ runner.arch }}" -like "*x86_64*") {
            $releaseFileName = "publisher-osx-x64.zip"
          }
          Write-Information "Printing out all environment variables in the shell for debugging purpose..."
          gci env:
          
          Write-Information "Downloading release..."
          $uri = "https://github.com/Azure/apiops/releases/download/${{ env.apiops_release_version }}/$releaseFileName"
          $downloadFilePath = Join-Path "${{ runner.temp }}" $releaseFileName
          Invoke-WebRequest -Uri "$uri" -OutFile "$downloadFilePath"
          
          Write-Information "Extracting release..."
          $executableFolderPath = Join-Path "${{ runner.temp }}" "publisher"
          Expand-Archive -Path "$downloadFilePath" -DestinationPath "$executableFolderPath"
          $executableFilePath = Join-Path "$executableFolderPath" $executableFileName

          Write-Information "Setting file permissions..."
          if ("${{ runner.os }}" -like "*linux*")
          {
            & chmod +x "$executableFilePath"
            if ($LASTEXITCODE -ne 0) { throw "Setting file permissions failed."}
          }

          Write-Information "Running publisher..."
          & "$executableFilePath"              
          if ($LASTEXITCODE -ne 0) { throw "Running publisher failed."}

          Write-Information "Execution complete."     
          
